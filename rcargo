#!/usr/bin/env bash

set -e

SELF="$0"
SCRIPT=$(realpath "$SELF")
ROOT_DIR=$(dirname "$SCRIPT")
RCARGO_DIR=".rcargo"
RCARGO_CONFIG_LOCAL="$RCARGO_DIR/config"
ACTIVE_BRANCHES_FILE="$RCARGO_DIR/active_branches.txt"

. $ROOT_DIR/src/build
. $ROOT_DIR/src/check
. $ROOT_DIR/src/clean
. $ROOT_DIR/src/common
. $ROOT_DIR/src/run
. $ROOT_DIR/src/session
. $ROOT_DIR/src/sync
. $ROOT_DIR/src/test

rcargo_usage() {
  cat << EOF

  Usage:
    rcargo <FLAG>
    rcargo <COMMAND> <SUBCOMMAND> [CARGO FLAGS]
  
  rcargo is a remote build tool for faster Rust development, using the Cargo
  package manager.

  Flags:
    -h, --help    show help message and exit

  Commands:
    help          show help message and exit

    build         Compile the current package
    check         Analyze the current package and report errors, but don't build object files
    clean         Remove artifacts that cargo has generated in the past
    run           Run a binary or example of the local package
    session       Manage multiple development sessions i.e. git branches
    sync          Sync local repository to remote, or vice versa
    test          Execute all unit and integration tests and build examples of a local package

  Try rcargo <COMMAND> -h (or --help) to learn more about each command.
  Default config is located at $ROOT_DIR/$RCARGO_CONFIG_LOCAL

EOF
}

COMMAND="$1"
if [ "$#" -ne  "0" ]
then
  shift
fi

MAYBE_SUBCOMMAND="$1"

case "$COMMAND" in
  "" | -h | --help | help)
    rcargo_usage
    exit; ;;

  build)
    case "$MAYBE_SUBCOMMAND" in
      -h | --help | help)
        build_usage
        exit; ;;

      *)
        header "Building package"
        build_cargo "$@"; ;;
    esac;;

  check)
    case "$MAYBE_SUBCOMMAND" in
      -h | --help | help)
        check_usage
        exit; ;;

      *)
        header "Checking package"
        check_cargo "$@"; ;;
    esac;;

  clean)
    case "$MAYBE_SUBCOMMAND" in
      "" | -h | --help | help)
        clean_usage
        exit; ;;

      all)
        shift
        clean_cargo_all  "$@"; ;;

      macro-cache)
        shift
        clean_cargo_macro_cache  "$@"; ;;

      *)
        header  "Unknown option: '$MAYBE_SUBCOMMAND'"
        format_usage
        exit 1; ;;
    esac;;

  run)
    case "$MAYBE_SUBCOMMAND" in
      -h | --help | help)
        run_usage
        exit; ;;

      *)
        header "Running package"
        run_cargo "$@"; ;;
    esac;;
    
  session)
    case "$MAYBE_SUBCOMMAND" in
      "" | -h | --help | help)
        session_usage
        exit; ;;

      show)
        shift
        session_show  "$@"; ;;

      remove)
        shift
        session_remove  "$@"; ;;

      *)
        header  "Unknown option: '$MAYBE_SUBCOMMAND'"
        format_usage
        exit 1; ;;
    esac;;
  
  sync)
    case "$MAYBE_SUBCOMMAND" in
      "" | -h | --help | help)
        sync_usage
        exit; ;;

      local-to-remote)
        shift
        sync_local_to_remote  "$@"; ;;

      remote-to-local)
        shift
        sync_remote_to_local  "$@"; ;;

      *)
        header  "Unknown option: '$MAYBE_SUBCOMMAND'"
        format_usage
        exit 1; ;;
    esac;;

  test)
    case "$MAYBE_SUBCOMMAND" in
      -h | --help | help)
        test_usage
        exit; ;;

      *)
        header "Testing package"
        test_cargo "$@"; ;;
    esac;;

  *)
    header "Unknown option: '$COMMAND'"
    rcargo_usage
    exit 1; ;;
esac
