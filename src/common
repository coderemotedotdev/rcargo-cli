#!/usr/bin/env bash

bold() {
  tput bold
}

normal() {
  tput sgr0
}

header() {
  bold && printf "\n  >> $1\n" && normal
}

basic_usage() {
  local cmd=$1
  cat << EOF

  Usage:
    rcargo $cmd <FLAG> [CARGO FLAGS]

  Flags:
    -h, --help       show help message and exit
    -e <VAR=value>   set environment variables

EOF
}

basic_cargo_cmd_wrapper() {
  # Order of operations matters!
  source_rcargo_config
  
  if [ "$GIT_SESSION_MANAGER" = true ]; then
    session_internal_add_cur_session_to_active_file
    local cur_session=$(session_internal_cur_session)
    local active_branches=$(tr '\n' ' ' < $ACTIVE_BRANCHES_FILE)
    ssh -tt $USER@$REMOTE_HOSTNAME "
      cd $REMOTE_DIR
      echo "Switching remote session to $cur_session..."
      python3 /home/shared/switch_project_session.py --selected-session "$cur_session" --active-sessions "$active_branches"
    "
  fi

  if [ "$AUTO_LOCAL_TO_REMOTE_SYNC_BEFORE_CARGO_CMD" = true ]; then
    sync_local_to_remote
  fi

  basic_internal_cargo_cmd "$@"
}

basic_internal_cargo_cmd() {
  local cmd=$1
  shift
  
  # Parse env vars
  exports=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -e)
        if [[ -n $2 ]]; then
          VAR=$(echo "$2" | cut -d'=' -f1)
          VALUE=$(echo "$2" | cut -d'=' -f2)

          exports+="$VAR=$VALUE "
          shift
        else
          echo "Error: Missing value for -e option"
          exit 1
        fi
        ;;
      *)
        # If not -e option, exit
        break
        ;;
    esac
    shift
  done
  if [ -z "$exports" ]; then
    should_export=false
  else
    should_export=true
  fi

  local args="$@"
  # Now that we do multiple ssh's, we should consider reusing ssh connections
  # e.g. https://stackoverflow.com/questions/20410252/how-to-reuse-an-ssh-connection
  ssh -tt $USER@$REMOTE_HOSTNAME "
    cd $REMOTE_DIR 
    echo "Remotely executing: cargo $cmd $args"
    $should_export && export $exports && echo "export $exports"
    $REMOTE_CARGO_WRAPPER $cmd $args
    exit
  "
}

source_rcargo_config() {
  if [ ! -d $RCARGO_DIR ]; then
    cp -r "$ROOT_DIR/$RCARGO_DIR" .
    echo "Initialized config at $PWD/$RCARGO_CONFIG_LOCAL (copied from $ROOT_DIR/$RCARGO_CONFIG_LOCAL)"
  fi
  . $RCARGO_CONFIG_LOCAL
}
